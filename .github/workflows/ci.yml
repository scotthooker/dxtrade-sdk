name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  REGISTRY: npm
  
jobs:
  setup:
    name: Setup and Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Generate cache key
        id: cache-key
        run: echo "key=deps-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT
        
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
        
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Run ESLint
        run: npm run lint
        
      - name: Check formatting
        run: npm run format:check
        
      - name: TypeScript check
        run: npx tsc --noEmit --skipLibCheck

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        node-version: ['18', '20', '21']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Run unit tests
        run: npm test -- --coverage
        
      - name: Run integration tests
        run: npm test src/test/integration/
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Build package
        run: npm run build
        
      - name: Verify build output
        run: |
          test -f dist/index.js || (echo "Main build output missing" && exit 1)
          test -f dist/index.d.ts || (echo "Type definitions missing" && exit 1)
          test -f dist/rest/index.js || (echo "REST module missing" && exit 1)
          test -f dist/websocket/index.js || (echo "WebSocket module missing" && exit 1)
          
      - name: Test build
        run: node -e "const pkg = require('./dist/index.js'); console.log('Build test passed:', !!pkg.DXTradeClient)"
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            README.md
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --high

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Generate TypeDoc documentation
        run: npm run docs
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          destination_dir: api

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    steps:
      - name: Quality gate check
        run: |
          echo "✅ All quality checks passed:"
          echo "  - Linting: ✅"
          echo "  - Testing: ✅" 
          echo "  - Building: ✅"
          echo "  - Security: ✅"
          
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Build package
        run: npm run build
        
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Update package version
        run: npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
        
      - name: Publish to NPM (latest)
        if: "!contains(github.ref, 'beta') && !contains(github.ref, 'alpha')"
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish to NPM (pre-release)
        if: "contains(github.ref, 'beta') || contains(github.ref, 'alpha')"
        run: npm publish --tag next --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate, publish-npm]
    if: always()
    steps:
      - name: Notification
        run: |
          if [ "${{ needs.quality-gate.result }}" == "success" ]; then
            echo "🎉 Pipeline completed successfully!"
          else
            echo "❌ Pipeline failed!"
          fi
          
          if [ "${{ needs.publish-npm.result }}" == "success" ]; then
            echo "📦 Package published to NPM!"
          fi

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Run benchmarks
        run: |
          echo "🏃 Running performance benchmarks..."
          # Add benchmark commands here when available
          echo "Benchmark results would appear here"

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          
      - name: Run E2E tests
        run: |
          echo "🧪 Running end-to-end tests..."
          # Run E2E tests against mock server
          npm test src/test/integration/ -- --reporter=verbose